{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SACA,MAAMC,EAASC,SAASC,cAAc,SAChCC,EAAaF,SAASC,cAAc,kBACpCE,EAAYH,SAASC,cAAc,iBACnCG,EAASJ,SAASC,cAAc,mBAGtCF,EAAOM,iBAAiB,UAAUC,IAChC,IAAIC,EAAgB,EAChBC,EAAaC,OAAOP,EAAWQ,OAASD,OAAON,EAAUO,OAC7DJ,EAAMK,iBACJC,YAAW,KACXC,QAAUC,aAAY,KAqB1B,IAAuBC,EAAUC,EApB3BR,GAAcC,OAAON,EAAUO,OAC/BH,GAAiB,GAmBAQ,EAlBHR,EAkBaS,EAlBER,EAmB1B,IAAIS,SAAQ,CAACC,EAAQC,KACJC,KAAKC,SAAW,GAElCH,EAAO,C,SAACH,E,MAAUC,IAElBG,EAAO,C,SAACJ,E,MAAUC,QAvBjBM,MAAK,EAACP,SAAEA,EAAQC,MAAEA,MACjBO,EAAA1B,GAAS2B,OAAOC,QACd,qBAAqBV,QAAeC,UAGvCU,OAAM,EAACX,SAAEA,EAAQC,MAAEA,MAClBO,EAAA1B,GAAS2B,OAAOG,QAAQ,oBAAoBZ,QAAeC,UAE3DT,IAAkBE,OAAOL,EAAOM,SAClCkB,cAAcf,SACdN,EAAgB,EAChBC,EAAa,KAEdC,OAAON,EAAUO,UACnBD,OAAOP,EAAWQ,OAASD,OAAON,EAAUO","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nconst formEl = document.querySelector('.form');\nconst firstDelay = document.querySelector('[name = delay]');\nconst delayStep = document.querySelector('[name = step]');\nconst amount = document.querySelector('[name = amount]');\n\n\nformEl.addEventListener('submit', event => {\n  let positionCount = 0;\n  let delayCount = Number(firstDelay.value) - Number(delayStep.value);\n  event.preventDefault();\n    setTimeout(() => {\n    timerId = setInterval(() => {\n      delayCount += Number(delayStep.value);\n      positionCount += 1;\n      createPromise(positionCount, delayCount)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(\n            `Fulfilled promise ${position} in ${delay}ms`\n          );\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n        });\n      if (positionCount === Number(amount.value)) {\n        clearInterval(timerId);\n        positionCount = 0;\n        delayCount = 0;\n      }\n    }, Number(delayStep.value));\n  }, Number(firstDelay.value) - Number(delayStep.value));\n});\n\nfunction createPromise(position, delay) {\n  return new Promise((resole, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n     if (shouldResolve) {\n        resole({position, delay});\n      } else {\n        reject({position, delay});\n      }\n    });\n};"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$formEl","document","querySelector","$47d4ff9957288465$var$firstDelay","$47d4ff9957288465$var$delayStep","$47d4ff9957288465$var$amount","addEventListener","event","positionCount","delayCount","Number","value","preventDefault","setTimeout","timerId","setInterval","position","delay","Promise","resole","reject","Math","random","then","$parcel$interopDefault","Notify","success","catch","failure","clearInterval"],"version":3,"file":"03-promises.1742b9c7.js.map"}