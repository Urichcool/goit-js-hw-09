{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SACMC,EAASC,SAASC,cAAc,SAChCC,EAAaF,SAASC,cAAc,kBACpCE,EAAYH,SAASC,cAAc,iBACnCG,EAASJ,SAASC,cAAc,mBAGtCF,EAAOM,iBAAiB,UAAU,SAAAC,GAChC,IAAIC,EAAgB,EAChBC,EAAaC,OAAOP,EAAWQ,OAASD,OAAON,EAAUO,OAC7DJ,EAAMK,iBACJC,YAAW,WACXC,QAAUC,aAAY,WAqB1B,IAAuBC,EAAUC,EApB3BR,GAAcC,OAAON,EAAUO,QAoBdK,EAnBjBR,GAAiB,EAmBUS,EAlBER,EAmB1B,IAAIS,SAAQ,SAACC,EAAQC,GACJC,KAAKC,SAAW,GAElCH,EAAO,CAACH,WAAUC,UAElBG,EAAO,CAACJ,WAAUC,cAvBjBM,MAAK,SAAAC,G,IAAGR,EAAQQ,EAARR,SAAUC,EAAKO,EAALP,MACjBQ,EAAA3B,GAAS4B,OAAOC,QACd,qBAAoCC,OAAfZ,EAAS,QAAYY,OAANX,EAAM,UAG7CY,OAAM,SAAAL,G,IAAGR,EAAQQ,EAARR,SAAUC,EAAKO,EAALP,MAClBQ,EAAA3B,GAAS4B,OAAOI,QAAQ,oBAAmCF,OAAfZ,EAAS,QAAYY,OAANX,EAAM,UAEjET,GAAiBH,EAAOM,QAC1BoB,cAAcjB,SACdN,EAAgB,EAChBC,EAAa,KAEdC,OAAON,EAAUO,UACnBD,OAAOP,EAAWQ,OAASD,OAAON,EAAUO,W","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nconst formEl = document.querySelector('.form');\nconst firstDelay = document.querySelector('[name = delay]');\nconst delayStep = document.querySelector('[name = step]');\nconst amount = document.querySelector('[name = amount]');\n\n\nformEl.addEventListener('submit', event => {\n  let positionCount = 0;\n  let delayCount = Number(firstDelay.value) - Number(delayStep.value);\n  event.preventDefault();\n    setTimeout(() => {\n    timerId = setInterval(() => {\n      delayCount += Number(delayStep.value);\n      positionCount += 1;\n      createPromise(positionCount, delayCount)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(\n            `Fulfilled promise ${position} in ${delay}ms`\n          );\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n        });\n      if (positionCount >= amount.value) {\n        clearInterval(timerId);\n        positionCount = 0;\n        delayCount = 0;\n      }\n    }, Number(delayStep.value));\n  }, Number(firstDelay.value) - Number(delayStep.value));\n});\n\nfunction createPromise(position, delay) {\n  return new Promise((resole, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n     if (shouldResolve) {\n        resole({position, delay});\n      } else {\n        reject({position, delay});\n      }\n    });\n};"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$formEl","document","querySelector","$ce04d3a99e08e73b$var$firstDelay","$ce04d3a99e08e73b$var$delayStep","$ce04d3a99e08e73b$var$amount","addEventListener","event","positionCount","delayCount","Number","value","preventDefault","setTimeout","timerId","setInterval","position","delay","Promise","resole","reject","Math","random","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure","clearInterval"],"version":3,"file":"03-promises.675a2a4f.js.map"}